CREATE TABLE my_tt_agg_small (
    symbol character(16),
    event_ts bigint,
    trade_price numeric,
    trade_volume bigint
);
CREATE TABLE my_tq_agg_small (
    ets bigint,
    sym character varying(16),
    bid_price numeric,
    ask_price numeric,
    end_ts bigint
);
COPY my_tt_agg_small (symbol, event_ts, trade_price, trade_volume) FROM stdin;
COPY my_tq_agg_small (ets, sym, bid_price, ask_price, end_ts) FROM stdin;
CREATE INDEX my_tq_agg_small_ets_end_ts_ix ON my_tq_agg_small USING btree (ets, end_ts);
analyze my_tq_agg_small;
analyze my_tt_agg_small;
set optimizer_enable_indexjoin=on;
set optimizer_nestloop_factor = 1.0;
-- force_explain
EXPLAIN 
SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Sort  (cost=3714.17..3715.20 rows=413 width=16)
   Sort Key: ((((tt.event_ts / 100000) / 5) * 5))
   ->  HashAggregate  (cost=3689.00..3696.22 rows=413 width=16)
         Group Key: (((tt.event_ts / 100000) / 5) * 5)
         ->  Hash Join  (cost=50.61..3462.03 rows=45394 width=8)
               Hash Cond: (tt.symbol = (tq.sym)::bpchar)
               Join Filter: ((tt.event_ts >= tq.ets) AND (tt.event_ts < tq.end_ts))
               ->  Seq Scan on my_tt_agg_small tt  (cost=0.00..5.20 rows=420 width=25)
               ->  Hash  (cost=25.27..25.27 rows=2027 width=20)
                     ->  Seq Scan on my_tq_agg_small tq  (cost=0.00..25.27 rows=2027 width=20)
 Optimizer: Postgres query optimizer
(11 rows)

SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
   fivemin    | count 
--------------+-------
 201011261015 |     2
 201011261045 |     1
 201011261110 |     1
 201011261125 |     1
 201011261240 |     1
 201011261245 |     1
 201011261315 |     2
 201011261320 |     3
(8 rows)

set optimizer_enable_hashjoin = off;
set enable_hashjoin=off;
set enable_seqscan=off;
set enable_mergejoin=off;
set enable_nestloop=on;
set enable_indexscan=on;
-- start_ignore
-- Known_opt_diff: OPT-929
-- end_ignore
-- force_explain
set optimizer_segments = 2;
set optimizer_nestloop_factor = 1.0;
EXPLAIN 
SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=10000008504.05..10000008851.73 rows=413 width=16)
   Group Key: ((((tt.event_ts / 100000) / 5) * 5))
   ->  Sort  (cost=10000008504.05..10000008617.54 rows=45394 width=8)
         Sort Key: ((((tt.event_ts / 100000) / 5) * 5))
         ->  Nested Loop  (cost=10000000000.28..10000004992.79 rows=45394 width=8)
               ->  Seq Scan on my_tt_agg_small tt  (cost=10000000000.00..10000000005.20 rows=420 width=25)
               ->  Index Scan using my_tq_agg_small_ets_end_ts_ix on my_tq_agg_small tq  (cost=0.28..9.94 rows=113 width=20)
                     Index Cond: ((ets <= tt.event_ts) AND (end_ts > tt.event_ts))
                     Filter: (tt.symbol = (sym)::bpchar)
 Optimizer: Postgres query optimizer
(10 rows)

reset optimizer_segments;
reset optimizer_nestloop_factor;
SELECT (tt.event_ts / 100000) / 5 * 5 as fivemin, COUNT(*)
FROM my_tt_agg_small tt, my_tq_agg_small tq
WHERE tq.sym = tt.symbol AND
      tt.event_ts >= tq.ets AND
      tt.event_ts <  tq.end_ts
GROUP BY 1
ORDER BY 1 asc ;
   fivemin    | count 
--------------+-------
 201011261015 |     2
 201011261045 |     1
 201011261110 |     1
 201011261125 |     1
 201011261240 |     1
 201011261245 |     1
 201011261315 |     2
 201011261320 |     3
(8 rows)

-- Test Index Scan on CO table as the right tree of a NestLoop join.
create table no_index_table(fake_col1 int, fake_col2 int, fake_col3 int, a int, b int);
insert into no_index_table values (1,1,1,1,1);
analyze no_index_table;
create table with_index_table(x int, y int) with (appendonly=true, orientation=column);
create index with_index_table_index on with_index_table (x);
insert into with_index_table select i, 1 from generate_series(1, 20)i;
analyze with_index_table;
set enable_material to off;
set enable_seqscan to off;
set enable_mergejoin to off;
set enable_hashjoin to off;
set enable_nestloop to on;
set optimizer_enable_materialize to off;
set optimizer_enable_hashjoin to off;
explain (costs off)
SELECT * from with_index_table td JOIN no_index_table ro ON td.y = ro.a AND td.x = ro.b;
                       QUERY PLAN                        
---------------------------------------------------------
 Nested Loop
   ->  Seq Scan on no_index_table ro
   ->  Bitmap Heap Scan on with_index_table td
         Recheck Cond: (x = ro.b)
         Filter: (ro.a = y)
         ->  Bitmap Index Scan on with_index_table_index
               Index Cond: (x = ro.b)
 Optimizer: Postgres query optimizer
(8 rows)

SELECT * from with_index_table td JOIN no_index_table ro ON td.y = ro.a AND td.x = ro.b;
 x | y | fake_col1 | fake_col2 | fake_col3 | a | b 
---+---+-----------+-----------+-----------+---+---
 1 | 1 |         1 |         1 |         1 | 1 | 1
(1 row)

reset all;

CREATE INDEX jidx ON testjsonb USING gin (j);
SET optimizer_enable_tablescan = off;
SET enable_seqscan = off;
set enable_bitmapscan = on;
EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=16.23..16.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=12.08..16.20 rows=10 width=0)
         Recheck Cond: (j @> '{"wait": null}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..12.08 rows=10 width=0)
               Index Cond: (j @> '{"wait": null}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC"}';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=16.23..16.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=12.08..16.20 rows=10 width=0)
         Recheck Cond: (j @> '{"wait": "CC"}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..12.08 rows=10 width=0)
               Index Cond: (j @> '{"wait": "CC"}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC", "public":true}';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=24.23..24.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=20.08..24.20 rows=10 width=0)
         Recheck Cond: (j @> '{"wait": "CC", "public": true}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..20.08 rows=10 width=0)
               Index Cond: (j @> '{"wait": "CC", "public": true}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"age":25}';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=16.23..16.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=12.08..16.20 rows=10 width=0)
         Recheck Cond: (j @> '{"age": 25}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..12.08 rows=10 width=0)
               Index Cond: (j @> '{"age": 25}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"age":25.0}';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=16.23..16.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=12.08..16.20 rows=10 width=0)
         Recheck Cond: (j @> '{"age": 25.0}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..12.08 rows=10 width=0)
               Index Cond: (j @> '{"age": 25.0}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"array":["foo"]}';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=16.23..16.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=12.08..16.20 rows=10 width=0)
         Recheck Cond: (j @> '{"array": ["foo"]}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..12.08 rows=10 width=0)
               Index Cond: (j @> '{"array": ["foo"]}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"array":["bar"]}';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=16.23..16.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=12.08..16.20 rows=10 width=0)
         Recheck Cond: (j @> '{"array": ["bar"]}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..12.08 rows=10 width=0)
               Index Cond: (j @> '{"array": ["bar"]}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
 count 
-------
     1
(1 row)

SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC"}';
 count 
-------
    15
(1 row)

SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC", "public":true}';
 count 
-------
     2
(1 row)

SELECT count(*) FROM testjsonb WHERE j @> '{"age":25}';
 count 
-------
     2
(1 row)

SELECT count(*) FROM testjsonb WHERE j @> '{"age":25.0}';
 count 
-------
     2
(1 row)

SELECT count(*) FROM testjsonb WHERE j @> '{"array":["foo"]}';
 count 
-------
     3
(1 row)

SELECT count(*) FROM testjsonb WHERE j @> '{"array":["bar"]}';
 count 
-------
     3
(1 row)

-- exercise GIN_SEARCH_MODE_ALL
EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{}';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate  (cost=3864.23..3864.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=3860.08..3864.20 rows=10 width=0)
         Recheck Cond: (j @> '{}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..3860.08 rows=10 width=0)
               Index Cond: (j @> '{}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j ? 'public';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=12.23..12.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=8.08..12.20 rows=10 width=0)
         Recheck Cond: (j ? 'public'::text)
         ->  Bitmap Index Scan on jidx  (cost=0.00..8.08 rows=10 width=0)
               Index Cond: (j ? 'public'::text)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j ? 'bar';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=12.23..12.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=8.08..12.20 rows=10 width=0)
         Recheck Cond: (j ? 'bar'::text)
         ->  Bitmap Index Scan on jidx  (cost=0.00..8.08 rows=10 width=0)
               Index Cond: (j ? 'bar'::text)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j ?| ARRAY['public','disabled'];
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=16.23..16.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=12.08..16.20 rows=10 width=0)
         Recheck Cond: (j ?| '{public,disabled}'::text[])
         ->  Bitmap Index Scan on jidx  (cost=0.00..12.08 rows=10 width=0)
               Index Cond: (j ?| '{public,disabled}'::text[])
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j ?& ARRAY['public','disabled'];
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=16.23..16.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=12.08..16.20 rows=10 width=0)
         Recheck Cond: (j ?& '{public,disabled}'::text[])
         ->  Bitmap Index Scan on jidx  (cost=0.00..12.08 rows=10 width=0)
               Index Cond: (j ?& '{public,disabled}'::text[])
 Optimizer: Postgres query optimizer
(6 rows)

SELECT count(*) FROM testjsonb WHERE j @> '{}';
 count 
-------
  1012
(1 row)

SELECT count(*) FROM testjsonb WHERE j ? 'public';
 count 
-------
   194
(1 row)

SELECT count(*) FROM testjsonb WHERE j ? 'bar';
 count 
-------
     0
(1 row)

SELECT count(*) FROM testjsonb WHERE j ?| ARRAY['public','disabled'];
 count 
-------
   337
(1 row)

SELECT count(*) FROM testjsonb WHERE j ?& ARRAY['public','disabled'];
 count 
-------
    42
(1 row)

-- array exists - array elements should behave as keys (for GIN index scans too)
CREATE INDEX jidx_array ON testjsonb USING gin((j->'array'));
-- gin index on expression not support for orca
EXPLAIN SELECT count(*) from testjsonb  WHERE j->'array' ? 'bar';
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Aggregate  (cost=12.26..12.27 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=8.08..12.23 rows=10 width=0)
         Recheck Cond: ((j -> 'array'::text) ? 'bar'::text)
         ->  Bitmap Index Scan on jidx_array  (cost=0.00..8.08 rows=10 width=0)
               Index Cond: ((j -> 'array'::text) ? 'bar'::text)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT count(*) from testjsonb  WHERE j->'array' ? 'bar';
 count 
-------
     3
(1 row)

-- type sensitive array exists - should return no rows (since "exists" only
-- matches strings that are either object keys or array elements)
-- gin index on expression not support for orca
EXPLAIN SELECT count(*) from testjsonb  WHERE j->'array' ? '5'::text;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Aggregate  (cost=12.26..12.27 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=8.08..12.23 rows=10 width=0)
         Recheck Cond: ((j -> 'array'::text) ? '5'::text)
         ->  Bitmap Index Scan on jidx_array  (cost=0.00..8.08 rows=10 width=0)
               Index Cond: ((j -> 'array'::text) ? '5'::text)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT count(*) from testjsonb  WHERE j->'array' ? '5'::text;
 count 
-------
     0
(1 row)

-- However, a raw scalar is *contained* within the array
EXPLAIN SELECT count(*) from testjsonb  WHERE j->'array' @> '5'::jsonb;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Aggregate  (cost=12.26..12.27 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=8.08..12.23 rows=10 width=0)
         Recheck Cond: ((j -> 'array'::text) @> '5'::jsonb)
         ->  Bitmap Index Scan on jidx_array  (cost=0.00..8.08 rows=10 width=0)
               Index Cond: ((j -> 'array'::text) @> '5'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT count(*) from testjsonb  WHERE j->'array' @> '5'::jsonb;
 count 
-------
     1
(1 row)

DROP INDEX jidx_array;
--gin path opclass
DROP INDEX jidx;
CREATE INDEX jidx ON testjsonb USING gin (j jsonb_path_ops);
EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=12.23..12.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=8.08..12.20 rows=10 width=0)
         Recheck Cond: (j @> '{"wait": null}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..8.08 rows=10 width=0)
               Index Cond: (j @> '{"wait": null}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC"}';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=12.23..12.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=8.08..12.20 rows=10 width=0)
         Recheck Cond: (j @> '{"wait": "CC"}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..8.08 rows=10 width=0)
               Index Cond: (j @> '{"wait": "CC"}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC", "public":true}';
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Aggregate  (cost=16.23..16.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=12.08..16.20 rows=10 width=0)
         Recheck Cond: (j @> '{"wait": "CC", "public": true}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..12.08 rows=10 width=0)
               Index Cond: (j @> '{"wait": "CC", "public": true}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"age":25}';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=12.23..12.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=8.08..12.20 rows=10 width=0)
         Recheck Cond: (j @> '{"age": 25}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..8.08 rows=10 width=0)
               Index Cond: (j @> '{"age": 25}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{"age":25.0}';
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Aggregate  (cost=12.23..12.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=8.08..12.20 rows=10 width=0)
         Recheck Cond: (j @> '{"age": 25.0}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..8.08 rows=10 width=0)
               Index Cond: (j @> '{"age": 25.0}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT count(*) FROM testjsonb WHERE j @> '{"wait":null}';
 count 
-------
     1
(1 row)

SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC"}';
 count 
-------
    15
(1 row)

SELECT count(*) FROM testjsonb WHERE j @> '{"wait":"CC", "public":true}';
 count 
-------
     2
(1 row)

SELECT count(*) FROM testjsonb WHERE j @> '{"age":25}';
 count 
-------
     2
(1 row)

SELECT count(*) FROM testjsonb WHERE j @> '{"age":25.0}';
 count 
-------
     2
(1 row)

-- exercise GIN_SEARCH_MODE_ALL
EXPLAIN SELECT count(*) FROM testjsonb WHERE j @> '{}';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate  (cost=6664.23..6664.24 rows=1 width=8)
   ->  Bitmap Heap Scan on testjsonb  (cost=6660.08..6664.20 rows=10 width=0)
         Recheck Cond: (j @> '{}'::jsonb)
         ->  Bitmap Index Scan on jidx  (cost=0.00..6660.08 rows=10 width=0)
               Index Cond: (j @> '{}'::jsonb)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT count(*) FROM testjsonb WHERE j @> '{}';
 count 
-------
  1012
(1 row)

DROP INDEX jidx;
-- check some corner cases for indexed nested containment (bug #13756)
create temp table nestjsonb (j jsonb);
insert into nestjsonb (j) values ('{"a":[["b",{"x":1}],["b",{"x":2}]],"c":3}');
insert into nestjsonb (j) values ('[[14,2,3]]');
insert into nestjsonb (j) values ('[1,[14,2,3]]');
create index on nestjsonb using gin(j jsonb_path_ops);
explain select * from nestjsonb where j @> '{"a":[[{"x":2}]]}'::jsonb;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Bitmap Heap Scan on nestjsonb  (cost=8.00..12.01 rows=1 width=32)
   Recheck Cond: (j @> '{"a": [[{"x": 2}]]}'::jsonb)
   ->  Bitmap Index Scan on nestjsonb_j_idx  (cost=0.00..8.00 rows=1 width=0)
         Index Cond: (j @> '{"a": [[{"x": 2}]]}'::jsonb)
 Optimizer: Postgres query optimizer
(5 rows)

explain select * from nestjsonb where j @> '{"c":3}';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Bitmap Heap Scan on nestjsonb  (cost=8.00..12.01 rows=1 width=32)
   Recheck Cond: (j @> '{"c": 3}'::jsonb)
   ->  Bitmap Index Scan on nestjsonb_j_idx  (cost=0.00..8.00 rows=1 width=0)
         Index Cond: (j @> '{"c": 3}'::jsonb)
 Optimizer: Postgres query optimizer
(5 rows)

explain select * from nestjsonb where j @> '[[14]]';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Bitmap Heap Scan on nestjsonb  (cost=8.00..12.01 rows=1 width=32)
   Recheck Cond: (j @> '[[14]]'::jsonb)
   ->  Bitmap Index Scan on nestjsonb_j_idx  (cost=0.00..8.00 rows=1 width=0)
         Index Cond: (j @> '[[14]]'::jsonb)
 Optimizer: Postgres query optimizer
(5 rows)

select * from nestjsonb where j @> '{"a":[[{"x":2}]]}'::jsonb;
                         j                         
---------------------------------------------------
 {"a": [["b", {"x": 1}], ["b", {"x": 2}]], "c": 3}
(1 row)

select * from nestjsonb where j @> '{"c":3}';
                         j                         
---------------------------------------------------
 {"a": [["b", {"x": 1}], ["b", {"x": 2}]], "c": 3}
(1 row)

select * from nestjsonb where j @> '[[14]]';
        j        
-----------------
 [[14, 2, 3]]
 [1, [14, 2, 3]]
(2 rows)

CREATE INDEX wowidx ON test_tsvector USING gin (a);
-- GIN only supports bitmapscan, so no need to test plain indexscan
explain (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on test_tsvector
         Recheck Cond: (a @@ '''wr'' | ''qh'''::tsquery)
         ->  Bitmap Index Scan on wowidx
               Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate  (cost=22.64..22.65 rows=1 width=8)
   ->  Bitmap Heap Scan on test_tsvector  (cost=13.24..22.24 rows=160 width=0)
         Recheck Cond: (a @@ '''wr'' | ''qh'''::tsquery)
         ->  Bitmap Index Scan on wowidx  (cost=0.00..13.20 rows=160 width=0)
               Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate  (cost=19.34..19.35 rows=1 width=8)
   ->  Bitmap Heap Scan on test_tsvector  (cost=12.12..19.30 rows=15 width=0)
         Recheck Cond: (a @@ '''wr'' & ''qh'''::tsquery)
         ->  Bitmap Index Scan on wowidx  (cost=0.00..12.11 rows=15 width=0)
               Index Cond: (a @@ '''wr'' & ''qh'''::tsquery)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt';
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Aggregate  (cost=19.05..19.06 rows=1 width=8)
   ->  Bitmap Heap Scan on test_tsvector  (cost=12.04..19.03 rows=5 width=0)
         Recheck Cond: (a @@ '''eq'' & ''yt'''::tsquery)
         ->  Bitmap Index Scan on wowidx  (cost=0.00..12.04 rows=5 width=0)
               Index Cond: (a @@ '''eq'' & ''yt'''::tsquery)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt';
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Aggregate  (cost=21.25..21.26 rows=1 width=8)
   ->  Bitmap Heap Scan on test_tsvector  (cost=12.77..21.00 rows=99 width=0)
         Recheck Cond: (a @@ '''eq'' | ''yt'''::tsquery)
         ->  Bitmap Index Scan on wowidx  (cost=0.00..12.74 rows=99 width=0)
               Index Cond: (a @@ '''eq'' | ''yt'''::tsquery)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate  (cost=27.45..27.46 rows=1 width=8)
   ->  Bitmap Heap Scan on test_tsvector  (cost=20.15..27.40 rows=20 width=0)
         Recheck Cond: (a @@ '''eq'' & ''yt'' | ''wr'' & ''qh'''::tsquery)
         ->  Bitmap Index Scan on wowidx  (cost=0.00..20.15 rows=20 width=0)
               Index Cond: (a @@ '''eq'' & ''yt'' | ''wr'' & ''qh'''::tsquery)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)';
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Aggregate  (cost=27.71..27.72 rows=1 width=8)
   ->  Bitmap Heap Scan on test_tsvector  (cost=20.24..27.63 rows=31 width=0)
         Recheck Cond: (a @@ '( ''eq'' | ''yt'' ) & ( ''wr'' | ''qh'' )'::tsquery)
         ->  Bitmap Index Scan on wowidx  (cost=0.00..20.23 rows=31 width=0)
               Index Cond: (a @@ '( ''eq'' | ''yt'' ) & ( ''wr'' | ''qh'' )'::tsquery)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate  (cost=34.56..34.57 rows=1 width=8)
   ->  Bitmap Heap Scan on test_tsvector  (cost=19.94..33.29 rows=508 width=0)
         Recheck Cond: (a @@ '''w'':* | ''q'':*'::tsquery)
         ->  Bitmap Index Scan on wowidx  (cost=0.00..19.81 rows=508 width=0)
               Index Cond: (a @@ '''w'':* | ''q'':*'::tsquery)
 Optimizer: Postgres query optimizer
(6 rows)

-- For orca, ScalarArrayOpExpr condition on index scan not supported
EXPLAIN SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}');
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate  (cost=22.64..22.65 rows=1 width=8)
   ->  Bitmap Heap Scan on test_tsvector  (cost=13.24..22.24 rows=160 width=0)
         Recheck Cond: (a @@ ANY ('{''wr'',''qh''}'::tsquery[]))
         ->  Bitmap Index Scan on wowidx  (cost=0.00..13.20 rows=160 width=0)
               Index Cond: (a @@ ANY ('{''wr'',''qh''}'::tsquery[]))
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme';
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Aggregate  (cost=12.02..12.03 rows=1 width=8)
   ->  Bitmap Heap Scan on test_tsvector  (cost=8.01..12.02 rows=1 width=0)
         Recheck Cond: (a @@ '''no_such_lexeme'''::tsquery)
         ->  Bitmap Index Scan on wowidx  (cost=0.00..8.01 rows=1 width=0)
               Index Cond: (a @@ '''no_such_lexeme'''::tsquery)
 Optimizer: Postgres query optimizer
(6 rows)

EXPLAIN SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme';
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Aggregate  (cost=4590.53..4590.54 rows=1 width=8)
   ->  Bitmap Heap Scan on test_tsvector  (cost=4575.93..4589.27 rows=507 width=0)
         Recheck Cond: (a @@ '!''no_such_lexeme'''::tsquery)
         ->  Bitmap Index Scan on wowidx  (cost=0.00..4575.80 rows=507 width=0)
               Index Cond: (a @@ '!''no_such_lexeme'''::tsquery)
 Optimizer: Postgres query optimizer
(6 rows)

SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
 count 
-------
   158
(1 row)

SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh';
 count 
-------
    17
(1 row)

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt';
 count 
-------
     6
(1 row)

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt';
 count 
-------
    98
(1 row)

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)';
 count 
-------
    23
(1 row)

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)';
 count 
-------
    39
(1 row)

SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*';
 count 
-------
   494
(1 row)

-- For orca, ScalarArrayOpExpr condition on index scan not supported
SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}');
 count 
-------
   158
(1 row)

SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme';
 count 
-------
     0
(1 row)

SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme';
 count 
-------
   508
(1 row)

DROP INDEX wowidx;
-- GIN index on complex array
CREATE TABLE complex_array_table (complex_arr complex[]);
CREATE INDEX ON complex_array_table USING gin (complex_arr);
INSERT INTO complex_array_table VALUES (ARRAY[COMPLEX(1,3), COMPLEX(5,7)]);
INSERT INTO complex_array_table VALUES (ARRAY[COMPLEX(2,4), COMPLEX(6,8)]);
EXPLAIN SELECT * FROM complex_array_table WHERE complex_arr @> ARRAY[COMPLEX(2,4)];
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on complex_array_table  (cost=12.21..22.55 rows=27 width=32)
   Recheck Cond: (complex_arr @> '{"2 + 4i"}'::complex[])
   ->  Bitmap Index Scan on complex_array_table_complex_arr_idx  (cost=0.00..12.20 rows=27 width=0)
         Index Cond: (complex_arr @> '{"2 + 4i"}'::complex[])
 Optimizer: Postgres query optimizer
(5 rows)

SELECT * FROM complex_array_table WHERE complex_arr @> ARRAY[COMPLEX(2,4)];
     complex_arr     
---------------------
 {"2 + 4i","6 + 8i"}
(1 row)

-- with orca bitmap table scan off and table scan off, orca should fallback to
-- planner to use bitmap index scan, as btree index plans are not supported with gin
set optimizer_enable_tablescan=off;
EXPLAIN SELECT * FROM complex_array_table WHERE complex_arr @> ARRAY[COMPLEX(2,4)];
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on complex_array_table  (cost=12.21..22.55 rows=27 width=32)
   Recheck Cond: (complex_arr @> '{"2 + 4i"}'::complex[])
   ->  Bitmap Index Scan on complex_array_table_complex_arr_idx  (cost=0.00..12.20 rows=27 width=0)
         Index Cond: (complex_arr @> '{"2 + 4i"}'::complex[])
 Optimizer: Postgres query optimizer
(5 rows)

DROP TABLE complex_array_table;
RESET enable_seqscan;
RESET enable_bitmapscan;
RESET optimizer_enable_tablescan;
